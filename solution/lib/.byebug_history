quit
c
display nodes.length == results.length
q
c
display results.length == nodes.length
c
nodes.length
results.length
c
q
c
q
c
q
c
q
c
q
c
q
c
q
c
q
c
q
h.score
h[:score]
q
h[:score
display h
h
q
nodes_to_visit.length
q
nodes_to_visit.length
s
q
nodes_to_visit + node.children
node.children.length
nodes_to_visit
q
c
q
c
q
c
q
c
q
tableau.index_in_order?(i)
c
tableau.index_in_order?(i)
c
q
c
q
c
q
c
q
c
q
c
q
c
q
c
q
cq
c
score
q
c
q
c
q
game
q
@game
game
graph
c
n
s
game.tableaus
c
q
c
q
node.tableaus
node
nod
c
q
possible_moves
q
empty_freecell
tableau
results
c
results
q
empty_freecell?
possible_moves
q
freecells
tableaus
possible_moves
q
node.children[1].tableaus
node.children[0].foundations
node.children[0].freecells
node.children[0].tableaus
node.children[0]
node
q
node
c
nodes_to_visit.count
c
q
nodes_to_visit.count
c
node.compressed
q
node.freecells
node.tableaus
key
node.tableaus
node
key
q
node.key
node
q
c
q
c
nodes
c
q
start_node.compress_node
start_node.compress
node
q
nodes
q
node
c
q
tableaus
foundations[0].stack.hash
foundations
foundatinos
results
q
start_node.compressed
node[:tableaus]
node
start_node.all_nodes
q
start_node
q
tabs[1].object_id
tabs[0].object_id
tabs[1].hash
tabs[0].hash
tabs[0] == tabs[1]
tabs[1]
tabs[0]
tabs
q
c
q
c
q
node[0][:tableaus]
q
display i
i
node
q
start_node.all_nodes
node.class
node.object
node.Object
node.type
node[0]
nodes[0]
node
q
c
foundations.count
freecells.count
q
a = Set.new()
a = Set.new
q
node
q
start_node.all_nodes
c
q
node.all_nodes
q
all_nodes[compress_node]
distance_from_root
q
@parent.children.count
@parent
parent
all_nodes.count
puts all_nodes
all_nodes
q
all_nodes
q
c
q
nodes_visited
end_time - start_time
start_time
player
q
c
q
@player
player
s
q
c
display nodes_to_visit.length
c
q
freecells
c
freecells
q
freecells
c
q
foundations
freecells
tableaus
n
tableaus
c
q
c
q
c
q
c
s
